import logging
from pprint import pprint

import requests
from telebot import TeleBot, types
from telebot.util import quick_markup
from openapi_client import WalletsApi, ApiClient, Wallet

from config import bot_token

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BASE_URL = 'http://localhost/api/v1/'


def get_wallets(user):
    '''
    wallets_url = BASE_URL + 'wallet'
    headers = {'Authorization': 'token'}
    try:
        wallets = requests.get(wallets_url, headers=headers)
    except Exception as e:
        logger.error(e, exc_info=True)
    '''
    api_client = ApiClient()
    '''
    wallets_api = WalletsApi(api_client)
    wallets = wallets_api.wallet_list().get()
    '''
    pprint(api_client.__dict__)

    wallets = [
        {
            'name': 'RUB',
            'currency': 'RUB',
            'balance': 100.1,
            'id': 1
        },
        {
            'name': 'USD',
            'currency': 'USD',
            'balance': 200.1,
            'id': 2
        },
        {
            'name': 'EUR',
            'currency': 'EUR',
            'balance': 300.1,
            'id': 3
        },
        {
            'name': 'UAH',
            'currency': 'UAH',
            'balance': 400.1,
            'id': 4
        },
    ]
    return wallets


def get_id(call):
    return call.data.split(':')[-1]


bot = TeleBot(bot_token)
logger.info('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.')


@bot.message_handler(commands=['help', 'start'])
def send_welcome(message):
    markup = quick_markup({
        '–ö–æ—à–µ–ª—å–∫–∏': {'callback_data': 'wallets'},
        '–ü–µ—Ä–µ–≤–æ–¥—ã': {'callback_data': 'transfers'},
    }, row_width=2)
    text = '–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:'
    bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'wallets')
def wallets(call):
    wllts = get_wallets(call.message.chat.id)
    markup = types.InlineKeyboardMarkup()
    markup.row_width = 2
    row = []
    for item in wllts:
        row.append(types.InlineKeyboardButton(
            f"{item['currency']} {item['balance']}",
            callback_data=f'wallet edit:{item["id"]}',
        ))
        if len(row) == markup.row_width:
            markup.add(*row)
            row = []
    markup.add(*row)

    text = '–í—ã–±–µ—Ä–∏ –∫–æ—à–µ–ª–µ–∫:'
    bot.send_message(call.message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('wallet edit'))  # noqa
def wallet_edit(call):
    id = get_id(call)
    markup = quick_markup({
        '–∏–∑–º–µ–Ω–∏—Ç—å': {'callback_data': f'wallet update:{id}'},
        '—É–¥–∞–ª–∏—Ç—å': {'callback_data': f'wallet delete:{id}'},
        '–Ω–∞–∑–∞–¥': {'callback_data': 'wallets'},
    }, row_width=2)
    text = '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:'
    bot.send_message(call.message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('wallet delete'))  # noqa
def wallet_delete(call):
    id = get_id(call)
    markup = quick_markup({
        '—É–¥–∞–ª–∏—Ç—å': {'callback_data': f'wallet delete yes:{id}'},
        '–æ—Ç–º–µ–Ω–∞': {'callback_data': f'wallet edit:{id}'},
    }, row_width=2)
    text = '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
    bot.send_message(call.message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('wallet delete yes'))  # noqa
def wallet_delete_yes(call):
    id = get_id(call)
    url = BASE_URL + 'wallet/' + id
    headers = {'Authorization': 'token'}
    try:
        requests.delete(url, headers=headers)
    except Exception as e:
        logger.error(e, exc_info=True)

    text = '–ö–æ—à–µ–ª–µ–∫ —É–¥–∞–ª–µ–Ω'
    bot.send_message(call.message.chat.id, text)


@bot.callback_query_handler(func=lambda call: call.data.startswith('wallet update'))  # noqa
def wallet_update(call):
    id = get_id(call)
    call.wallet = id
    pprint(call.__dict__)
    text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–æ—à–µ–ª—å–∫–∞:'
    message = bot.send_message(call.message.chat.id, text)
    bot.register_next_step_handler(message, wallet_update_yes)


def wallet_update_yes(message):
    id = message.wallet
    url = BASE_URL + 'wallet/' + id
    headers = {'Authorization': 'token'}
    data = {'name': message.text}
    '''
    try:
        requests.patch(url, headers=headers, data=data)
    except Exception as e:
        logger.error(e, exc_info=True)
    '''
    text = '–ö–æ—à–µ–ª–µ–∫ –∏–∑–º–µ–Ω–µ–Ω'
    pprint(message.__dict__)
    bot.send_message(message.message.chat.id, text)


'''
# —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
def first_step_handler(message: Message):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞—Ç—Ä–∏–±—É—Ç–µ message.user_answer
    message.user_answer = message.text
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥:")
    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    bot.register_next_step_handler(message, second_step_handler)

# —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞
def second_step_handler(message: Message):
    # –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ message.user_answer
    user_answer = message.user_answer
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    user_answer2 = message.text
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    bot.send_message(message.chat.id, f"–í—ã –≤–≤–µ–ª–∏: {user_answer} –∏ {user_answer2}")

# —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
bot.register_next_step_handler(message, first_step_handler)
'''


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def welcome(message):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ")
    item2 = types.KeyboardButton("üòä –ö–∞–∫ –¥–µ–ª–∞?")
    item3 = types.KeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫")

    markup.add(item1, item2, item3)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø - <b>{1.first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ.".format(
                         message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ"
@bot.message_handler(content_types=['text'])
def random_number(message):
    if message.chat.type == 'private':
        if message.text == 'üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 100
            bot.send_message(message.chat.id, str(random.randint(0, 100)))

        elif message.text == 'üòä –ö–∞–∫ –¥–µ–ª–∞?':
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
            item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data='bad')

            markup.add(item1, item2)

            bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –∫–∞–∫ —É —Ç–µ–±—è?', reply_markup=markup)

        elif message.text == 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫':
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞—Ü–∏–∏
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)

            markup.add(item1)

            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é –∏ —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–¥–∞—Ä–æ–∫!",
                             reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                bot.send_message(call.message.chat.id, '–Ø —Ä–∞–¥, —á—Ç–æ —É —Ç–µ–±—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ! üòä')
            elif call.data == 'bad':
                bot.send_message(call.message.chat.id, '–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è! üòä')

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–û—Ç–ª–∏—á–Ω–æ, –∫–∞–∫ —É —Ç–µ–±—è?",
                                  reply_markup=None)

    except Exception as e:
        print(repr(e))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
