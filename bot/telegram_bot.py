import asyncio
import logging
from random import randint

from telebot.async_telebot import AsyncTeleBot, types
from telebot.util import quick_markup

from config import bot_token


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


bot = AsyncTeleBot(bot_token)
logger.info('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.')


@bot.message_handler(commands=['start'])
async def welcome(message):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("wallets")

    markup.add(item1)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø - <b>{1.first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ.".format(  # noqa
            message.from_user, await bot.get_me()
        ), parse_mode='html', reply_markup=markup
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ"
@bot.message_handler(content_types=['text'])
async def random_number(message):
    if message.chat.type == 'private':
        if message.text == 'üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 100
            await bot.send_message(message.chat.id, str(randint(0, 100)))

        elif message.text == 'üòä –ö–∞–∫ –¥–µ–ª–∞?':
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
            item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data='bad')

            markup.add(item1, item2)

            await bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –∫–∞–∫ —É —Ç–µ–±—è?',
                                   reply_markup=markup)

        elif message.text == 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫':
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞—Ü–∏–∏
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é",
                                         request_location=True)

            markup.add(item1)

            await bot.send_message(
                message.chat.id,
                "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é –∏ —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–¥–∞—Ä–æ–∫!",  # noqa
                reply_markup=markup
            )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.callback_query_handler(func=lambda call: True)
async def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                await bot.send_message(call.message.chat.id,
                                       '–Ø —Ä–∞–¥, —á—Ç–æ —É —Ç–µ–±—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ! üòä')
            elif call.data == 'bad':
                await bot.send_message(call.message.chat.id,
                                       '–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è! üòä')

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–û—Ç–ª–∏—á–Ω–æ, –∫–∞–∫ —É —Ç–µ–±—è?",
                reply_markup=None
            )

    except Exception as e:
        print(repr(e))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞—Ü–∏–∏
@bot.message_handler(content_types=['location'])
async def handle_location(message):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)

    markup.add(item1)

    await bot.send_message(
        message.chat.id,
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç, —á—Ç–æ–±—ã —è –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π.",  # noqa
        reply_markup=markup
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@bot.message_handler(content_types=['contact'])
async def handle_contact(message):
    await bot.send_message(
        message.chat.id,
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç! –Ø —Å–≤—è–∂—É—Å—å —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.polling(none_stop=True)


if __name__ == '__main__':
    asyncio.run(main())


import telebot
from telebot import types

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = telebot.TeleBot('TOKEN')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def welcome(message):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ")
    item2 = types.KeyboardButton("üòä –ö–∞–∫ –¥–µ–ª–∞?")
    item3 = types.KeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫")

    markup.add(item1, item2, item3)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø - <b>{1.first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ.".format(  # noqa
            message.from_user, bot.get_me()
        ), parse_mode='html', reply_markup=markup
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ"
@bot.message_handler(content_types=['text'])
def random_number(message):
    if message.chat.type == 'private':
        if message.text == 'üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 100
            bot.send_message(message.chat.id, str(randint(0, 100)))

        elif message.text == 'üòä –ö–∞–∫ –¥–µ–ª–∞?':
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
            item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data='bad')

            markup.add(item1, item2)

            bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –∫–∞–∫ —É —Ç–µ–±—è?',
                             reply_markup=markup)

        elif message.text == 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫':
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞—Ü–∏–∏
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é",
                                         request_location=True)

            markup.add(item1)

            bot.send_message(
                message.chat.id,
                "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é –∏ —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–¥–∞—Ä–æ–∫!",  # noqa
                reply_markup=markup
            )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                bot.send_message(call.message.chat.id,
                                 '–Ø —Ä–∞–¥, —á—Ç–æ —É —Ç–µ–±—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ! üòä')
            elif call.data == 'bad':
                bot.send_message(call.message.chat.id,
                                 '–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è! üòä')

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text="–û—Ç–ª–∏—á–Ω–æ, –∫–∞–∫ —É —Ç–µ–±—è?",
                                  reply_markup=None)

    except Exception as e:
        print(repr(e))


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
